{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hp\\\\OneDrive\\\\Desktop\\\\Just give a try man\\\\my-app\\\\src\\\\pages\\\\PdfViewer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewPdf = () => {\n  _s();\n  const [pdfUrl, setPdfUrl] = useState('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    // Fetch the latest PDF URL from the backend\n    const fetchLatestPdf = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/latest-pdf\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch the latest PDF\");\n        }\n        const data = await response.json();\n        setPdfUrl(data.pdfUrl);\n        setError(\"\"); // Clear any previous error\n      } catch (err) {\n        setError('Failed to fetch the latest PDF');\n        console.error(err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchLatestPdf();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      height: '100vh',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: pdfUrl ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n      src: pdfUrl,\n      title: \"Latest PDF\",\n      width: \"80%\",\n      height: \"600px\",\n      style: {\n        border: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No PDF found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewPdf, \"j38cdKcyR7cYlQF5cQtWlZuCIR0=\");\n_c = ViewPdf;\nexport default ViewPdf;\nvar _c;\n$RefreshReg$(_c, \"ViewPdf\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ViewPdf","_s","pdfUrl","setPdfUrl","loading","setLoading","error","setError","fetchLatestPdf","response","fetch","ok","Error","data","json","err","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","width","height","display","justifyContent","alignItems","src","title","border","_c","$RefreshReg$"],"sources":["C:/Users/Hp/OneDrive/Desktop/Just give a try man/my-app/src/pages/PdfViewer.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst ViewPdf = () => {\r\n  const [pdfUrl, setPdfUrl] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Fetch the latest PDF URL from the backend\r\n    const fetchLatestPdf = async () => {\r\n      try {\r\n        const response = await fetch(\"http://localhost:5000/latest-pdf\");\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch the latest PDF\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    setPdfUrl(data.pdfUrl);\r\n    setError(\"\"); // Clear any previous error\r\n      } catch (err) {\r\n        setError('Failed to fetch the latest PDF');\r\n        console.error(err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchLatestPdf();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n      {pdfUrl ? (\r\n        <iframe\r\n          src={pdfUrl}\r\n          title=\"Latest PDF\"\r\n          width=\"80%\"\r\n          height=\"600px\"\r\n          style={{ border: 'none' }}\r\n        />\r\n      ) : (\r\n        <div>No PDF found</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewPdf;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,CAAC;QAEpE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;QACnD;QAEA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAClCX,SAAS,CAACU,IAAI,CAACX,MAAM,CAAC;QACtBK,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;MACZ,CAAC,CAAC,OAAOQ,GAAG,EAAE;QACZR,QAAQ,CAAC,gCAAgC,CAAC;QAC1CS,OAAO,CAACV,KAAK,CAACS,GAAG,CAAC;MACpB,CAAC,SAAS;QACRV,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIJ,OAAO,EAAE;IACX,oBAAOL,OAAA;MAAAkB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,IAAIf,KAAK,EAAE;IACT,oBAAOP,OAAA;MAAAkB,QAAA,EAAMX;IAAK;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC3B;EAEA,oBACEtB,OAAA;IAAKuB,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE,OAAO;MAAEC,OAAO,EAAE,MAAM;MAAEC,cAAc,EAAE,QAAQ;MAAEC,UAAU,EAAE;IAAS,CAAE;IAAAV,QAAA,EAC7Gf,MAAM,gBACLH,OAAA;MACE6B,GAAG,EAAE1B,MAAO;MACZ2B,KAAK,EAAC,YAAY;MAClBN,KAAK,EAAC,KAAK;MACXC,MAAM,EAAC,OAAO;MACdF,KAAK,EAAE;QAAEQ,MAAM,EAAE;MAAO;IAAE;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,gBAEFtB,OAAA;MAAAkB,QAAA,EAAK;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK;EACvB;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpB,EAAA,CApDID,OAAO;AAAA+B,EAAA,GAAP/B,OAAO;AAsDb,eAAeA,OAAO;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}